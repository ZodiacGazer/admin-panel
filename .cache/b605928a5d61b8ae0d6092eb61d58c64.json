{"dependencies":[{"name":"resolve-pathname","loc":{"line":8,"column":31}},{"name":"value-equal","loc":{"line":12,"column":26}},{"name":"./PathUtils","loc":{"line":16,"column":25}}],"generated":{"js":"'use strict';\r\n\r\nexports.__esModule = true;\r\nexports.locationsAreEqual = exports.createLocation = undefined;\r\n\r\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nvar _resolvePathname = require('resolve-pathname');\r\n\r\nvar _resolvePathname2 = _interopRequireDefault(_resolvePathname);\r\n\r\nvar _valueEqual = require('value-equal');\r\n\r\nvar _valueEqual2 = _interopRequireDefault(_valueEqual);\r\n\r\nvar _PathUtils = require('./PathUtils');\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nvar createLocation = exports.createLocation = function createLocation(path, state, key, currentLocation) {\r\n  var location = void 0;\r\n  if (typeof path === 'string') {\r\n    // Two-arg form: push(path, state)\r\n    location = (0, _PathUtils.parsePath)(path);\r\n    location.state = state;\r\n  } else {\r\n    // One-arg form: push(location)\r\n    location = _extends({}, path);\r\n\r\n    if (location.pathname === undefined) location.pathname = '';\r\n\r\n    if (location.search) {\r\n      if (location.search.charAt(0) !== '?') location.search = '?' + location.search;\r\n    } else {\r\n      location.search = '';\r\n    }\r\n\r\n    if (location.hash) {\r\n      if (location.hash.charAt(0) !== '#') location.hash = '#' + location.hash;\r\n    } else {\r\n      location.hash = '';\r\n    }\r\n\r\n    if (state !== undefined && location.state === undefined) location.state = state;\r\n  }\r\n\r\n  try {\r\n    location.pathname = decodeURI(location.pathname);\r\n  } catch (e) {\r\n    if (e instanceof URIError) {\r\n      throw new URIError('Pathname \"' + location.pathname + '\" could not be decoded. ' + 'This is likely caused by an invalid percent-encoding.');\r\n    } else {\r\n      throw e;\r\n    }\r\n  }\r\n\r\n  if (key) location.key = key;\r\n\r\n  if (currentLocation) {\r\n    // Resolve incomplete/relative pathname relative to current location.\r\n    if (!location.pathname) {\r\n      location.pathname = currentLocation.pathname;\r\n    } else if (location.pathname.charAt(0) !== '/') {\r\n      location.pathname = (0, _resolvePathname2.default)(location.pathname, currentLocation.pathname);\r\n    }\r\n  } else {\r\n    // When there is no prior location and pathname is empty, set it to /\r\n    if (!location.pathname) {\r\n      location.pathname = '/';\r\n    }\r\n  }\r\n\r\n  return location;\r\n};\r\n\r\nvar locationsAreEqual = exports.locationsAreEqual = function locationsAreEqual(a, b) {\r\n  return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash && a.key === b.key && (0, _valueEqual2.default)(a.state, b.state);\r\n};"},"hash":"35c186e0894c6eeae70988aaebc27560"}